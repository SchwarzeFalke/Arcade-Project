
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftDIFFERENTIDENTICALleftLESSLESSEQUALGREATERGREATEREQUALleftPLUSMINUSleftTIMESDIVIDEODDrightINCREMENTDECREMENTrightPLUSEQUALMINUSEQUALTIMESEQUALDIVIDEEQUALODDEQUALleftLPARENRPARENleftLBRACKETRBRACKETASSIGN BOOLEAN_FALSE BOOLEAN_TRUE COLON COMMA COMMENT DECREMENT DEFAULT_CASE DIFFERENT DIVIDE DIVIDEEQUAL DOT ERROR_SWITCH FLOAT FOR_STATEMENT GREATER GREATEREQUAL IDENTICAL IDENTIFIER IF_NOT_STATEMENT IF_STATEMENT INCREMENT INTEGER IN_STREAM LBRACKET LCURLY LESS LESSEQUAL LPAREN MINUS MINUSEQUAL ODD ODDEQUAL OUT_STREAM PLUS PLUSEQUAL POWER QUOTES RBRACKET RCURLY RPAREN SEMICOLON START_DECLARATION STRING STRUCT_DECLARATION SWITCH_STATEMENT TIMES TIMESEQUAL VAR_DECLARATION WHILE_STATEMENTprogram : blockblock : varDecl varAssign statementvarDecl : VAR_DECLARATION IDENTIFIER ASSIGN INTEGER SEMICOLONvarDecl : VAR_DECLARATION IDENTIFIER ASSIGN FLOAT SEMICOLONvarDecl : VAR_DECLARATION IDENTIFIER ASSIGN STRING SEMICOLONvarDecl : VAR_DECLARATION IDENTIFIER ASSIGN BOOLEAN_TRUE SEMICOLONvarDecl : VAR_DECLARATION IDENTIFIER ASSIGN BOOLEAN_FALSE SEMICOLONvarAssign : IDENTIFIER ASSIGN INTEGER SEMICOLONvarAssign : IDENTIFIER ASSIGN FLOAT SEMICOLONvarAssign : IDENTIFIER ASSIGN STRING SEMICOLONvarDecl : emptystatement : IDENTIFIER ASSIGN expression SEMICOLONstatement : IF_STATEMENT condition IF_NOT_STATEMENT statementstatement : FOR_STATEMENT LPAREN statement RPAREN COLON statementstatement : WHILE_STATEMENT LPAREN condition RPAREN COLON statementstatement : emptycondition : expression relation expressionrelation : IDENTICALrelation : DIFFERENTrelation : GREATERrelation : LESSrelation : GREATEREQUALrelation : LESSEQUALexpression : IDENTIFIERexpression : PLUS IDENTIFIERexpression : expression PLUS IDENTIFIERterm : factorterm : term multiplyingOperator factormultiplyingOperator : TIMESmultiplyingOperator : DIVIDEfactor : IDENTIFIERfactor : INTEGERfactor : FLOATfactor : LPAREN expression RPARENempty :'
    
_lr_action_items = {'VAR_DECLARATION':([0,],[4,]),'IDENTIFIER':([0,3,4,5,6,11,17,21,22,23,33,34,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,59,60,],[-35,7,8,-11,10,20,20,42,10,20,10,20,56,-18,-19,-20,-21,-22,-23,-8,-9,-10,-3,-4,-5,-6,-7,10,10,]),'$end':([1,2,6,9,14,33,45,46,47,53,54,59,60,61,62,],[0,-1,-35,-2,-16,-35,-8,-9,-10,-12,-13,-35,-35,-14,-15,]),'IF_STATEMENT':([6,22,33,45,46,47,59,60,],[11,11,11,-8,-9,-10,11,11,]),'FOR_STATEMENT':([6,22,33,45,46,47,59,60,],[12,12,12,-8,-9,-10,12,12,]),'WHILE_STATEMENT':([6,22,33,45,46,47,59,60,],[13,13,13,-8,-9,-10,13,13,]),'ASSIGN':([7,8,10,],[15,16,17,]),'PLUS':([11,17,19,20,23,32,34,36,37,38,39,40,41,42,55,56,],[21,21,35,-24,21,35,21,-18,-19,-20,-21,-22,-23,-25,35,-26,]),'LPAREN':([12,13,],[22,23,]),'RPAREN':([14,20,22,33,42,43,44,53,54,55,56,59,60,61,62,],[-16,-24,-35,-35,-25,57,58,-12,-13,-17,-26,-35,-35,-14,-15,]),'INTEGER':([15,16,],[24,27,]),'FLOAT':([15,16,],[25,28,]),'STRING':([15,16,],[26,29,]),'BOOLEAN_TRUE':([16,],[30,]),'BOOLEAN_FALSE':([16,],[31,]),'IF_NOT_STATEMENT':([18,20,42,55,56,],[33,-24,-25,-17,-26,]),'IDENTICAL':([19,20,42,56,],[36,-24,-25,-26,]),'DIFFERENT':([19,20,42,56,],[37,-24,-25,-26,]),'GREATER':([19,20,42,56,],[38,-24,-25,-26,]),'LESS':([19,20,42,56,],[39,-24,-25,-26,]),'GREATEREQUAL':([19,20,42,56,],[40,-24,-25,-26,]),'LESSEQUAL':([19,20,42,56,],[41,-24,-25,-26,]),'SEMICOLON':([20,24,25,26,27,28,29,30,31,32,42,56,],[-24,45,46,47,48,49,50,51,52,53,-25,-26,]),'COLON':([57,58,],[59,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'varDecl':([0,],[3,]),'empty':([0,6,22,33,59,60,],[5,14,14,14,14,14,]),'varAssign':([3,],[6,]),'statement':([6,22,33,59,60,],[9,43,54,61,62,]),'condition':([11,23,],[18,44,]),'expression':([11,17,23,34,],[19,32,19,55,]),'relation':([19,],[34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','parse.py',20),
  ('block -> varDecl varAssign statement','block',3,'p_block','parse.py',25),
  ('varDecl -> VAR_DECLARATION IDENTIFIER ASSIGN INTEGER SEMICOLON','varDecl',5,'p_varDecl1','parse.py',35),
  ('varDecl -> VAR_DECLARATION IDENTIFIER ASSIGN FLOAT SEMICOLON','varDecl',5,'p_varDecl2','parse.py',40),
  ('varDecl -> VAR_DECLARATION IDENTIFIER ASSIGN STRING SEMICOLON','varDecl',5,'p_varDecl3','parse.py',45),
  ('varDecl -> VAR_DECLARATION IDENTIFIER ASSIGN BOOLEAN_TRUE SEMICOLON','varDecl',5,'p_varDecl4','parse.py',50),
  ('varDecl -> VAR_DECLARATION IDENTIFIER ASSIGN BOOLEAN_FALSE SEMICOLON','varDecl',5,'p_varDecl5','parse.py',55),
  ('varAssign -> IDENTIFIER ASSIGN INTEGER SEMICOLON','varAssign',4,'p_varAssign1','parse.py',60),
  ('varAssign -> IDENTIFIER ASSIGN FLOAT SEMICOLON','varAssign',4,'p_varAssign2','parse.py',65),
  ('varAssign -> IDENTIFIER ASSIGN STRING SEMICOLON','varAssign',4,'p_varAssign3','parse.py',70),
  ('varDecl -> empty','varDecl',1,'p_varDeclEmpty','parse.py',75),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement1','parse.py',95),
  ('statement -> IF_STATEMENT condition IF_NOT_STATEMENT statement','statement',4,'p_statement2','parse.py',100),
  ('statement -> FOR_STATEMENT LPAREN statement RPAREN COLON statement','statement',6,'p_statement3','parse.py',105),
  ('statement -> WHILE_STATEMENT LPAREN condition RPAREN COLON statement','statement',6,'p_statement4','parse.py',110),
  ('statement -> empty','statement',1,'p_statementEmpty','parse.py',115),
  ('condition -> expression relation expression','condition',3,'p_condition','parse.py',135),
  ('relation -> IDENTICAL','relation',1,'p_relation1','parse.py',140),
  ('relation -> DIFFERENT','relation',1,'p_relation2','parse.py',145),
  ('relation -> GREATER','relation',1,'p_relation3','parse.py',150),
  ('relation -> LESS','relation',1,'p_relation4','parse.py',155),
  ('relation -> GREATEREQUAL','relation',1,'p_relation5','parse.py',160),
  ('relation -> LESSEQUAL','relation',1,'p_relation6','parse.py',165),
  ('expression -> IDENTIFIER','expression',1,'p_expression1','parse.py',170),
  ('expression -> PLUS IDENTIFIER','expression',2,'p_expression2','parse.py',175),
  ('expression -> expression PLUS IDENTIFIER','expression',3,'p_expression3','parse.py',180),
  ('term -> factor','term',1,'p_term1','parse.py',185),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','parse.py',190),
  ('multiplyingOperator -> TIMES','multiplyingOperator',1,'p_multiplyingOperator1','parse.py',195),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','parse.py',200),
  ('factor -> IDENTIFIER','factor',1,'p_factor1','parse.py',205),
  ('factor -> INTEGER','factor',1,'p_factor2','parse.py',210),
  ('factor -> FLOAT','factor',1,'p_factor3','parse.py',215),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor4','parse.py',220),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',225),
]
